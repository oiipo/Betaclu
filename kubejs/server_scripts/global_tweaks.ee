// File: kubejs/server_scripts/global_tweaks.js
// Combines item removals, loot modifications (Aether), and Wandering Trader trade additions.

// From: kubejs/server_scripts/global_tweaks.js

// --- SECTION 1: Item Recipe Removals ---
ServerEvents.recipes(event => {
    console.log('KubeJS: Removing specified item recipes...');

    // List of item IDs to remove recipes for (both crafting and usage)
    const itemsToRemoveRecipes = [
        'minecraft:shield',
        'minecraft:elytra', // No default recipe, but removes mod-added ones
        'minecraft:crossbow',
        'minecraft:totem_of_undying', // No recipe by default
        'minecraft:trident', // No recipe by default
        'minecraft:phantom_membrane' // Stops crafting Slow Falling Potions & Elytra repair
    ];

    itemsToRemoveRecipes.forEach(id => {
        event.remove({ output: id }); // Remove recipes that create this item
        event.remove({ input: id });  // Remove recipes that use this item as an ingredient
        console.log(` KJS: Removed recipes related to ${id}`);
    });

    // Specifically remove shield banner patterns
    event.remove({ id: /minecraft:shield_decoration/ });
    console.log(' KJS: Removed shield decoration recipes.');
});
// --- SECTION 2: Loot Table Modifications (Corrected Syntax for KJS/LootJS on 1.21+) ---
LootJS.modifiers(event => {
    console.log('KubeJS: Modifying loot tables using event.modify()...');

    // --- Item Removals from Loot ---
    try {
        event.modify('minecraft:chests/end_city_treasure', table => {
            table.removeLoot('minecraft:elytra');
            console.log(' KJS: Modified minecraft:chests/end_city_treasure');
        });
        event.modify('minecraft:entities/evoker', table => {
            table.removeLoot('minecraft:totem_of_undying');
             console.log(' KJS: Modified minecraft:entities/evoker');
        });
        event.modify('minecraft:entities/drowned', table => {
            table.removeLoot('minecraft:trident');
            console.log(' KJS: Modified minecraft:entities/drowned');
        });
        event.modify('minecraft:entities/pillager', table => {
            table.removeLoot('minecraft:crossbow');
            console.log(' KJS: Modified minecraft:entities/pillager');
        });
        event.modify('minecraft:chests/pillager_outpost', table => {
            table.removeLoot('minecraft:crossbow');
            console.log(' KJS: Modified minecraft:chests/pillager_outpost');
        });
        event.modify('minecraft:gameplay/piglin_bartering', table => {
            table.removeLoot('minecraft:crossbow');
            // Note: Removing NBT items might be tricky here. Let's test if simple removal works first.
            // If slow falling potions still appear, more specific removal might be needed.
            table.removeLoot('minecraft:potion', itemStack => itemStack.hasNBT() && itemStack.nbt.contains('Potion') && itemStack.nbt.getString('Potion') == 'minecraft:slow_falling');
            table.removeLoot('minecraft:splash_potion', itemStack => itemStack.hasNBT() && itemStack.nbt.contains('Potion') && itemStack.nbt.getString('Potion') == 'minecraft:slow_falling');
            console.log(' KJS: Modified minecraft:gameplay/piglin_bartering');
        });
        event.modify('minecraft:entities/phantom', table => {
            table.removeLoot('minecraft:phantom_membrane');
            console.log(' KJS: Modified minecraft:entities/phantom');
        });
        event.modify('minecraft:gameplay/cat_morning_gift', table => {
            table.removeLoot('minecraft:phantom_membrane');
            console.log(' KJS: Modified minecraft:gameplay/cat_morning_gift');
        });

    } catch (error) {
         console.error(` KJS Error during loot REMOVAL modification: ${error}`);
    }

    // --- Add Shulker Shells to Aether Loot ---
    try {
        // !!! IMPORTANT: VERIFY THESE AETHER LOOT TABLE IDS FOR YOUR MOD VERSION !!!
        const aetherRewardTables = [
            'aether:chests/dungeons/bronze_dungeon_reward', // Example ID
            'aether:chests/dungeons/silver_dungeon_reward', // Example ID
            'aether:chests/dungeons/gold_dungeon_reward'    // Example ID
            // Add other Aether tables here if desired
        ];
        const shulkerShellMin = 4;
        const shulkerShellMax = 8;
        const shulkerShellChance = 0.12; // Chance for shells to appear (e.g., 12%)

        aetherRewardTables.forEach(tableId => {
            event.modify(tableId, table => {
                table.addLoot(Item.of('minecraft:shulker_shell')
                                  .withChance(shulkerShellChance)
                                  .withCount([shulkerShellMin, shulkerShellMax]));
                console.log(` KJS: Modified Aether table: ${tableId}`);
            });
        });
    } catch (error) {
         console.error(` KJS Error during Aether loot ADDITION: ${error}`);
         console.error(` Failed table ID might be within the loop above. Check Aether table IDs/syntax.`);
    }

     console.log('KJS: Finished modifying loot tables section.');
});
// --- END OF SECTION 2 ---

// --- SECTION 3: Wandering Trader Trades ---
// Requires MoreJS Addon!
MoreJSEvents.wandererTrades(event => {
    console.log('KubeJS: Adding Wandering Trader trades...');

    // Tier 1 Trades (Common / Basic)
    event.addTrade({ tier: 1, input: [Item.of('minecraft:emerald', 4)], output: Item.of('minecraft:sea_lantern', 1), max_uses: 8 });
    event.addTrade({ tier: 1, input: [Item.of('minecraft:emerald', 1)], output: Item.of('minecraft:prismarine_shards', 4), max_uses: 12 });
    event.addTrade({ tier: 1, input: [Item.of('minecraft:emerald', 3)], output: Item.of('minecraft:prismarine', 1), max_uses: 8 }); // Prismarine Block
    event.addTrade({ tier: 1, input: [Item.of('minecraft:emerald', 1)], output: Item.of('minecraft:mud', 8), max_uses: 16 });
    event.addTrade({ tier: 1, input: [Item.of('minecraft:emerald', 1)], output: Item.of('minecraft:end_stone', 6), max_uses: 12 });

    // Tier 2 Trades (Rarer / More Expensive)
    event.addTrade({ tier: 2, input: [Item.of('minecraft:emerald', 5)], output: Item.of('minecraft:purpur_block', 2), max_uses: 6 });
    event.addTrade({ tier: 2, input: [Item.of('minecraft:emerald', 8)], output: Item.of('minecraft:end_rod', 1), max_uses: 4 });
    event.addTrade({ tier: 2, input: [Item.of('minecraft:emerald', 12)], output: Item.of('minecraft:frogspawn', 1), max_uses: 2 });

    console.log(' KJS: Finished adding Wandering Trader trades.');
});

console.log('KubeJS: Server scripts loaded (global_tweaks.js).');
// File: kubejs/server_scripts/global_tweaks.js
// (Add this section to the end of your existing file)

// --- SECTION 4: Disable Phantoms via Gamerule ---
ServerEvents.loaded(event => {
    // This command runs once when the server is fully loaded.
    // Setting doInsomnia to false prevents Phantoms from spawning naturally
    // due to lack of player sleep. This is the standard vanilla way.
    event.server.runCommandSilent('/gamerule doInsomnia false');
    event.server.runCommandSilent('/gamerule playersSleepingPercentage 50');
    console.log('KJS: Set gamerule doInsomnia to false (Vanilla Phantom spawning disabled).');
});
// File: kubejs/server_scripts/global_tweaks.js
// Add this section to the end of the file

// --- SECTION 5: Remove Advancements ---
// This uses highPriorityData to remove advancements before they are loaded.
ServerEvents.highPriorityData(event => {
    // Ensure this code only runs on the server side during datapack loading phase
    if (!event.server) return;

    console.log('KJS: Removing specified advancements...');

    const advancementsToRemove = [
        // --- End Progression ---
        'minecraft:end/root',                // Enter the End
        'minecraft:end/kill_dragon',         // Free the End
        'minecraft:end/dragon_egg',          // The Next Generation
        'minecraft:end/enter_end_gateway',   // Remote Getaway
        'minecraft:end/respawn_dragon',      // The End... Again...
        'minecraft:end/dragon_breath',       // You Need a Mint
        'minecraft:end/find_end_city',       // The City at the End of the Game

        // --- Elytra ---
        'minecraft:adventure/elytra_flight', // Sky's the Limit

        // --- Trident ---
        'minecraft:adventure/throw_trident',          // A Throwaway Joke
        'minecraft:adventure/very_very_frightening',  // Very Very Frightening

        // --- Crossbow ---
        'minecraft:adventure/two_birds_one_arrow',     // Two Birds, One Arrow
        'minecraft:adventure/whos_the_pillager_now',   // Who's the Pillager Now?
        'minecraft:adventure/arbalistic'              // Arbalistic
    ];

    advancementsToRemove.forEach(advancementId => {
        // Format the ID like 'minecraft:advancements/end/kill_dragon.json'
        const path = `advancements/${advancementId.substring(advancementId.indexOf(':') + 1)}.json`;
        const namespace = advancementId.substring(0, advancementId.indexOf(':'));

        // Remove the advancement file from the virtual datapack
        event.remove(`${namespace}:${path}`);
        console.log(` KJS: Removed advancement: ${advancementId}`);
    });

     console.log('KJS: Finished removing advancements.');
});

// --- END OF SECTION 5 ---

console.log('KubeJS: Server scripts loaded (global_tweaks.js - Updated).'); // Optional: Update final log message